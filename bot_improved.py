import logging
import datetime
from typing import Dict, List
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import BOT_TOKEN, USER_ID, TIMEZONE, TASKS_SCHEDULE
from database import TaskDatabase
from utils import get_moscow_time, format_date, get_day_name, get_motivational_message, get_task_emoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ImprovedTaskAssistantBot:
    def __init__(self):
        self.db = TaskDatabase()
        self.scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        self.setup_scheduler()
        self.user_streak = 0  # –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        self.last_completion_date = None
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        for task_type, task_config in TASKS_SCHEDULE.items():
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
            for day in task_config['days']:
                hour, minute = map(int, task_config['time'].split(':'))
                self.scheduler.add_job(
                    self.send_task_reminder,
                    CronTrigger(day_of_week=day, hour=hour, minute=minute),
                    args=[task_type, task_config['name']],
                    id=f'reminder_{task_type}_{day}'
                )
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for day in task_config['days']:
                hour, minute = map(int, task_config['check_time'].split(':'))
                self.scheduler.add_job(
                    self.send_completion_check,
                    CronTrigger(day_of_week=day, hour=hour, minute=minute),
                    args=[task_type, task_config['name']],
                    id=f'check_{task_type}_{day}'
                )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
        self.scheduler.add_job(
            self.send_daily_report,
            CronTrigger(hour=22, minute=0),
            id='daily_report'
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 22:30
        self.scheduler.add_job(
            self.send_weekly_report,
            CronTrigger(day_of_week='sun', hour=22, minute=30),
            id='weekly_report'
        )
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start —Å –ª—É—á—à–∏–º UX"""
        if update.effective_user.id != USER_ID:
            await update.message.reply_text("üîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –ö–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–¥–∞—á.

üéØ –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å:
‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–µ–π –≤ 6:05
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ 9:00  
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏/–π–æ–≥–æ–π –≤ 15:00

üí° –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."""
        
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /help —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        if update.effective_user.id != USER_ID:
            return
        
        help_text = """üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìä **–û—Ç—á–µ—Ç—ã:**
/report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
/start_bot - –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/stop_bot - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

‚ùì **–ü–æ–º–æ—â—å:**
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def send_task_reminder(self, task_type: str, task_name: str):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        try:
            today = get_moscow_time().strftime('%Y-%m-%d')
            current_time = get_moscow_time().strftime('%H:%M')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            task_id = self.db.add_task(task_type, today)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            emoji = get_task_emoji(task_type)
            message = f"{emoji} **–í—Ä–µ–º—è –¥–ª—è {task_name}!**\n\n"
            message += f"üïê {current_time}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
            hour = get_moscow_time().hour
            if hour < 8:
                message += "üåÖ –û—Ç–ª–∏—á–Ω–æ–µ —É—Ç—Ä–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è!"
            elif hour < 12:
                message += "‚òÄÔ∏è –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            else:
                message += "üí™ –í—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ!", callback_data=f"quick_yes_{task_type}_{today}")],
                [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"remind_later_{task_type}_{today}")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"quick_no_{task_type}_{today}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message_to_user(message, reply_markup)
            self.db.mark_reminder_sent(task_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def send_completion_check(self, task_type: str, task_name: str):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            today = get_moscow_time().strftime('%Y-%m-%d')
            current_time = get_moscow_time().strftime('%H:%M')
            
            emoji = get_task_emoji(task_type)
            message = f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞: {task_name}**\n\n"
            message += f"‚è∞ {current_time}\n\n"
            message += "–í—ã–ø–æ–ª–Ω–∏–ª –ª–∏ —Ç—ã —ç—Ç—É –∑–∞–¥–∞—á—É?"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏–ª!", callback_data=f"check_yes_{task_type}_{today}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ —É—Å–ø–µ–ª", callback_data=f"check_no_{task_type}_{today}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message_to_user(message, reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    async def send_daily_report(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π"""
        try:
            today = get_moscow_time()
            today_str = today.strftime('%Y-%m-%d')
            day_name = get_day_name(today.weekday())
            
            stats = self.db.get_completion_stats(today_str, today_str)
            tasks = self.db.get_tasks_for_date(today_str)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤–æ–π –¥–∞—Ç–æ–π
            report = f"üìä **–û—Ç—á–µ—Ç –∑–∞ {day_name.lower()}, {today.strftime('%d.%m')}**\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if stats['total_tasks'] > 0:
                progress = "‚ñà" * int(stats['completion_rate'] / 10) + "‚ñë" * (10 - int(stats['completion_rate'] / 10))
                report += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress}] {stats['completion_rate']}%\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}/{stats['total_tasks']}\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
            if tasks:
                report += "üìã **–î–µ—Ç–∞–ª–∏:**\n"
                for task in tasks:
                    emoji = get_task_emoji(task['task_type'])
                    status = "‚úÖ" if task['completed'] else "‚ùå"
                    report += f"{emoji} {task['task_type']}: {status}\n"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            motivation = get_motivational_message(stats['completion_rate'])
            report += f"\n{motivation}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            self.db.save_report('daily', today_str, today_str, stats)
            
            await self.send_message_to_user(report, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_weekly_report(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            today = get_moscow_time()
            week_start = today - datetime.timedelta(days=today.weekday())
            week_end = today
            
            week_start_str = week_start.strftime('%Y-%m-%d')
            week_end_str = week_end.strftime('%Y-%m-%d')
            
            stats = self.db.get_completion_stats(week_start_str, week_end_str)
            tasks = self.db.get_tasks_for_period(week_start_str, week_end_str)
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            report = f"üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n"
            report += f"üìÖ {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            if stats['total_tasks'] > 0:
                progress = "‚ñà" * int(stats['completion_rate'] / 10) + "‚ñë" * (10 - int(stats['completion_rate'] / 10))
                report += f"üìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** [{progress}] {stats['completion_rate']}%\n\n"
            
            report += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}/{stats['total_tasks']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for task in tasks:
                date = task['date']
                if date not in daily_stats:
                    daily_stats[date] = {'total': 0, 'completed': 0}
                daily_stats[date]['total'] += 1
                if task['completed']:
                    daily_stats[date]['completed'] += 1
            
            report += "üìÖ **–ü–æ –¥–Ω—è–º:**\n"
            for date in sorted(daily_stats.keys()):
                day_stats = daily_stats[date]
                rate = (day_stats['completed'] / day_stats['total'] * 100) if day_stats['total'] > 0 else 0
                date_obj = datetime.datetime.strptime(date, '%Y-%m-%d')
                day_name = get_day_name(date_obj.weekday())
                report += f"‚Ä¢ {day_name}: {day_stats['completed']}/{day_stats['total']} ({rate:.0f}%)\n"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏—è
            motivation = get_motivational_message(stats['completion_rate'])
            report += f"\n{motivation}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            self.db.save_report('weekly', week_start_str, week_end_str, stats)
            
            await self.send_message_to_user(report, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_message_to_user(self, message: str, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        pass
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if update.effective_user.id != USER_ID:
            return
        
        data = query.data
        
        if data.startswith('quick_') or data.startswith('check_'):
            parts = data.split('_')
            action = parts[1]
            task_type = parts[2]
            date = parts[3]
            
            completed = action == 'yes'
            self.db.mark_task_completed(task_type, date, completed)
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            emoji = get_task_emoji(task_type)
            if completed:
                response = f"{emoji} –û—Ç–ª–∏—á–Ω–æ! {task_type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            else:
                response = f"{emoji} –ü–æ–Ω—è—Ç–Ω–æ, {task_type} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n\nüåü –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å!"
            
            await query.edit_message_text(response, reply_markup=None)
        
        elif data.startswith('remind_later_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ"
            parts = data.split('_')
            task_type = parts[2]
            date = parts[3]
            
            response = f"‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!"
            await query.edit_message_text(response, reply_markup=None)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /today"""
        if update.effective_user.id != USER_ID:
            return
        
        today = get_moscow_time()
        today_str = today.strftime('%Y-%m-%d')
        day_name = get_day_name(today.weekday())
        
        # –°—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        tasks_in_db = {t['task_type']: t for t in self.db.get_tasks_for_date(today_str)}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        from config import TASKS_SCHEDULE
        scheduled_today = []
        for task_type, cfg in TASKS_SCHEDULE.items():
            if today.weekday() in cfg['days']:
                scheduled_today.append((task_type, cfg['name']))
        
        message = f"üìÖ **{day_name.lower()}, {today.strftime('%d.%m')}**\n\n"
        if not scheduled_today:
            message += "üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ—Ç."
        else:
            message += "üìã **–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:**\n"
            for task_type, display_name in scheduled_today:
                emoji = get_task_emoji(task_type)
                if task_type in tasks_in_db:
                    status = "‚úÖ" if tasks_in_db[task_type]['completed'] else "‚è≥"
                else:
                    status = "‚è≥"
                message += f"{emoji} {display_name}: {status}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /stats"""
        if update.effective_user.id != USER_ID:
            return
        
        today = get_moscow_time().strftime('%Y-%m-%d')
        stats = self.db.get_completion_stats(today, today)
        
        message = "üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        
        if stats['total_tasks'] > 0:
            progress = "‚ñà" * int(stats['completion_rate'] / 10) + "‚ñë" * (10 - int(stats['completion_rate'] / 10))
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress}] {stats['completion_rate']}%\n\n"
            message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}/{stats['total_tasks']}\n\n"
            
            motivation = get_motivational_message(stats['completion_rate'])
            message += motivation
        else:
            message += "üéØ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            message += "–ù–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è!"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def start_bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start_bot"""
        if update.effective_user.id != USER_ID:
            return
        
        if not self.scheduler.running:
            self.scheduler.start()
            message = "ü§ñ **–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            message += "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n"
            message += "üìä –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            message += "üéØ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏!"
        else:
            message = "ü§ñ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            message += "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã."
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def stop_bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /stop_bot"""
        if update.effective_user.id != USER_ID:
            return
        
        if self.scheduler.running:
            self.scheduler.shutdown()
            message = "‚èπÔ∏è **–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            message += "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
            message += "üìä –û—Ç—á–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n\n"
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π /start_bot –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        else:
            message = "‚èπÔ∏è –ë–æ—Ç —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π /start_bot –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
        
        await update.message.reply_text(message, parse_mode='Markdown')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not USER_ID:
        logger.error("USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    bot_instance = ImprovedTaskAssistantBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_message_to_user(message: str, reply_markup=None, parse_mode=None):
        try:
            await application.bot.send_message(
                chat_id=USER_ID,
                text=message,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    bot_instance.send_message_to_user = send_message_to_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot_instance.start))
    application.add_handler(CommandHandler("help", bot_instance.help_command))
    application.add_handler(CommandHandler("today", bot_instance.today_command))
    application.add_handler(CommandHandler("stats", bot_instance.stats_command))
    application.add_handler(CommandHandler("start_bot", bot_instance.start_bot_command))
    application.add_handler(CommandHandler("stop_bot", bot_instance.stop_bot_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot_instance.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    bot_instance.scheduler.start()
    
    logger.info("–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await application.start()
        await application.updater.start_polling()
        
        logger.info("–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        import signal
        import asyncio
        
        shutting_down = False
        stop_event = asyncio.Event()
        
        def signal_handler():
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            asyncio.create_task(shutdown())
        
        async def shutdown():
            nonlocal shutting_down
            if shutting_down:
                return
            shutting_down = True
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            try:
                if getattr(application, 'updater', None):
                    await application.updater.stop()
            except RuntimeError:
                # Updater —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ updater: {e}")
            
            await application.stop()
            await application.shutdown()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if bot_instance.scheduler.running:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                bot_instance.scheduler.shutdown()
            logger.info("–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ü–∏–∫–ª—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            try:
                stop_event.set()
            except Exception:
                pass
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in [signal.SIGTERM, signal.SIGINT]:
            signal.signal(sig, lambda s, f: signal_handler())
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å–∏–≥–Ω–∞–ª –æ—Ç shutdown)
        await stop_event.wait()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if bot_instance.scheduler.running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            bot_instance.scheduler.shutdown()
        raise

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
