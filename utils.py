"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
"""

import datetime
import pytz
from typing import Dict, List

def get_moscow_time() -> datetime.datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return datetime.datetime.now(pytz.timezone('Europe/Moscow'))

def format_time(time_obj: datetime.datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return time_obj.strftime('%H:%M')

def format_date(date_obj: datetime.datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return date_obj.strftime('%Y-%m-%d')

def get_week_start_end(date: datetime.datetime) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    week_start = date - datetime.timedelta(days=date.weekday())
    week_end = week_start + datetime.timedelta(days=6)
    return week_start, week_end

def get_day_name(day_number: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days[day_number]

def calculate_completion_rate(completed: int, total: int) -> float:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if total == 0:
        return 0.0
    return round((completed / total) * 100, 1)

def get_task_emoji(task_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    emojis = {
        'meditation': 'üßò',
        'planning': 'üìù',
        'workout': 'üí™',
        'yoga': 'üßò‚Äç‚ôÄÔ∏è'
    }
    return emojis.get(task_type, 'üìã')

def format_task_status(completed: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

def create_progress_bar(completed: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if total == 0:
        return "‚îÅ" * length
    
    filled = int((completed / total) * length)
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    return f"[{bar}] {completed}/{total}"

def get_motivational_message(completion_rate: float) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if completion_rate >= 90:
        return "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ!"
    elif completion_rate >= 70:
        return "üëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif completion_rate >= 50:
        return "üí™ –ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!"
    elif completion_rate >= 30:
        return "üìà –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å! –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!"
    else:
        return "üåü –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! –í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!"

def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    try:
        datetime.datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False

def parse_time(time_str: str) -> tuple:
    """–†–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    try:
        time_obj = datetime.datetime.strptime(time_str, '%H:%M')
        return time_obj.hour, time_obj.minute
    except ValueError:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –û–∂–∏–¥–∞–µ—Ç—Å—è HH:MM")

def get_next_occurrence(day_name: str, time_str: str) -> datetime.datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.datetime.now(moscow_tz)
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    day_mapping = {
        'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
        'friday': 4, 'saturday': 5, 'sunday': 6
    }
    
    target_day = day_mapping.get(day_name.lower())
    if target_day is None:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è: {day_name}")
    
    hour, minute = parse_time(time_str)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    days_ahead = target_day - now.weekday()
    if days_ahead <= 0:  # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        days_ahead += 7
    
    next_date = now + datetime.timedelta(days=days_ahead)
    next_occurrence = next_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    return next_occurrence
