import logging
import datetime
from typing import Dict, List
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import BOT_TOKEN, USER_ID, TIMEZONE, TASKS_SCHEDULE
from database import TaskDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TaskAssistantBot:
    def __init__(self):
        self.db = TaskDatabase()
        self.scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        self.setup_scheduler()
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        for task_type, task_config in TASKS_SCHEDULE.items():
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
            for day in task_config['days']:
                hour, minute = map(int, task_config['time'].split(':'))
                self.scheduler.add_job(
                    self.send_task_reminder,
                    CronTrigger(day_of_week=day, hour=hour, minute=minute),
                    args=[task_type, task_config['name']],
                    id=f'reminder_{task_type}_{day}'
                )
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for day in task_config['days']:
                hour, minute = map(int, task_config['check_time'].split(':'))
                self.scheduler.add_job(
                    self.send_completion_check,
                    CronTrigger(day_of_week=day, hour=hour, minute=minute),
                    args=[task_type, task_config['name']],
                    id=f'check_{task_type}_{day}'
                )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
        self.scheduler.add_job(
            self.send_daily_report,
            CronTrigger(hour=22, minute=0),
            id='daily_report'
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 22:30
        self.scheduler.add_job(
            self.send_weekly_report,
            CronTrigger(day_of_week=6, hour=22, minute=30),  # 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            id='weekly_report'
        )
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if update.effective_user.id != USER_ID:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–¥–∞—á!

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞—à–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
‚Ä¢ 06:05 - –ú–µ–¥–∏—Ç–∞—Ü–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ 06:50)
‚Ä¢ 09:00 - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ 09:16)
‚Ä¢ 15:00 - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ü–Ω, –ß—Ç, –í—Å) –∏–ª–∏ –ô–æ–≥–∞ (–í—Ç, –°—Ä, –ü—Ç, –°–±) (–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ 17:00)

üìä –û—Ç—á–µ—Ç—ã:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 22:30

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if update.effective_user.id != USER_ID:
            return
        
        help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/today - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/start_bot - –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/stop_bot - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        """
        await update.message.reply_text(help_text)
    
    async def send_task_reminder(self, task_type: str, task_name: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ"""
        try:
            today = datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%Y-%m-%d')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            task_id = self.db.add_task(task_type, today)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\nüìã –í—Ä–µ–º—è –¥–ª—è: {task_name}\nüïê {datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%H:%M')}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"quick_yes_{task_type}_{today}")],
                [InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"quick_no_{task_type}_{today}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å application.bot)
            # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ main —Ñ—É–Ω–∫—Ü–∏–∏
            await self.send_message_to_user(message, reply_markup)
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            self.db.mark_reminder_sent(task_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def send_completion_check(self, task_type: str, task_name: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            today = datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%Y-%m-%d')
            
            message = f"üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n\nüìã –ó–∞–¥–∞—á–∞: {task_name}\n‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%H:%M')}\n\n–í—ã–ø–æ–ª–Ω–∏–ª–∏ –ª–∏ –≤—ã —ç—Ç—É –∑–∞–¥–∞—á—É?"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"check_yes_{task_type}_{today}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"check_no_{task_type}_{today}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message_to_user(message, reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            today = datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%Y-%m-%d')
            stats = self.db.get_completion_stats(today, today)
            tasks = self.db.get_tasks_for_date(today)
            
            report = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}\n\n"
            report += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
            report += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}\n"
            report += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['completion_rate']}%\n\n"
            
            report += "üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
            for task in tasks:
                status = "‚úÖ" if task['completed'] else "‚ùå"
                report += f"‚Ä¢ {task['task_type']}: {status}\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            self.db.save_report('daily', today, today, stats)
            
            await self.send_message_to_user(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            today = datetime.datetime.now(pytz.timezone(TIMEZONE))
            week_start = (today - datetime.timedelta(days=today.weekday())).strftime('%Y-%m-%d')
            week_end = today.strftime('%Y-%m-%d')
            
            stats = self.db.get_completion_stats(week_start, week_end)
            tasks = self.db.get_tasks_for_period(week_start, week_end)
            
            report = f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n"
            report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {week_start} - {week_end}\n\n"
            report += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
            report += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}\n"
            report += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['completion_rate']}%\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for task in tasks:
                date = task['date']
                if date not in daily_stats:
                    daily_stats[date] = {'total': 0, 'completed': 0}
                daily_stats[date]['total'] += 1
                if task['completed']:
                    daily_stats[date]['completed'] += 1
            
            report += "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n"
            for date in sorted(daily_stats.keys()):
                day_stats = daily_stats[date]
                rate = (day_stats['completed'] / day_stats['total'] * 100) if day_stats['total'] > 0 else 0
                report += f"‚Ä¢ {date}: {day_stats['completed']}/{day_stats['total']} ({rate:.1f}%)\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            self.db.save_report('weekly', week_start, week_end, stats)
            
            await self.send_message_to_user(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_message_to_user(self, message: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ main —Ñ—É–Ω–∫—Ü–∏–∏
        pass
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if update.effective_user.id != USER_ID:
            return
        
        data = query.data
        
        if data.startswith('quick_') or data.startswith('check_'):
            parts = data.split('_')
            action = parts[1]  # yes –∏–ª–∏ no
            task_type = parts[2]
            date = parts[3]
            
            completed = action == 'yes'
            self.db.mark_task_completed(task_type, date, completed)
            
            status_emoji = "‚úÖ" if completed else "‚ùå"
            status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            
            await query.edit_message_text(
                f"{status_emoji} –ó–∞–¥–∞—á–∞ {task_type} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status_text}",
                reply_markup=None
            )
    
    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /today"""
        if update.effective_user.id != USER_ID:
            return
        
        tz = pytz.timezone(TIMEZONE)
        now = datetime.datetime.now(tz)
        today_str = now.strftime('%Y-%m-%d')
        weekday = now.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        # –°—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        tasks_in_db = {t['task_type']: t for t in self.db.get_tasks_for_date(today_str)}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        scheduled_today = []
        for task_type, cfg in TASKS_SCHEDULE.items():
            if weekday in cfg['days']:
                scheduled_today.append((task_type, cfg['name']))
        
        # –ï—Å–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ—Ç (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏), —Å–æ–æ–±—â–∏–º, –Ω–æ —Å –Ω–∞—à–∏–º –¢–ó —ç—Ç–æ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è
        if not scheduled_today:
            await update.message.reply_text(f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str}) –∑–∞–¥–∞—á –Ω–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
            return
        
        message = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str}):\n\n"
        for task_type, display_name in scheduled_today:
            if task_type in tasks_in_db:
                status = "‚úÖ" if tasks_in_db[task_type]['completed'] else "‚è≥"
            else:
                status = "‚è≥"  # –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –Ω–æ –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –µ—Å—Ç—å
            message += f"‚Ä¢ {display_name}: {status}\n"
        
        await update.message.reply_text(message)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        if update.effective_user.id != USER_ID:
            return
        
        today = datetime.datetime.now(pytz.timezone(TIMEZONE)).strftime('%Y-%m-%d')
        stats = self.db.get_completion_stats(today, today)
        
        message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
        message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}\n"
        message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['completion_rate']}%"
        
        await update.message.reply_text(message)
    
    async def start_bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start_bot"""
        if update.effective_user.id != USER_ID:
            return
        
        if not self.scheduler.running:
            self.scheduler.start()
            await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await update.message.reply_text("ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    
    async def stop_bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop_bot"""
        if update.effective_user.id != USER_ID:
            return
        
        if self.scheduler.running:
            self.scheduler.shutdown()
            await update.message.reply_text("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        else:
            await update.message.reply_text("‚èπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not USER_ID:
        logger.error("USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot_instance = TaskAssistantBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_message_to_user(message: str, reply_markup=None):
        try:
            await application.bot.send_message(
                chat_id=USER_ID,
                text=message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    bot_instance.send_message_to_user = send_message_to_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot_instance.start))
    application.add_handler(CommandHandler("help", bot_instance.help_command))
    application.add_handler(CommandHandler("today", bot_instance.today_command))
    application.add_handler(CommandHandler("stats", bot_instance.stats_command))
    application.add_handler(CommandHandler("start_bot", bot_instance.start_bot_command))
    application.add_handler(CommandHandler("stop_bot", bot_instance.stop_bot_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot_instance.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    bot_instance.scheduler.start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await application.start()
        await application.updater.start_polling()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        import signal
        import asyncio
        
        shutting_down = False
        
        def signal_handler():
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            asyncio.create_task(shutdown())
        
        async def shutdown():
            nonlocal shutting_down
            if shutting_down:
                return
            shutting_down = True
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            try:
                if getattr(application, 'updater', None):
                    await application.updater.stop()
            except RuntimeError:
                # Updater —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ updater: {e}")
            
            await application.stop()
            await application.shutdown()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if bot_instance.scheduler.running:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                bot_instance.scheduler.shutdown()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in [signal.SIGTERM, signal.SIGINT]:
            signal.signal(sig, lambda s, f: signal_handler())
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        while True:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if bot_instance.scheduler.running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            bot_instance.scheduler.shutdown()
        raise

# –£–±—Ä–∞–Ω–æ asyncio.run() –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å run.py
# if __name__ == '__main__':
#     import asyncio
#     asyncio.run(main())
